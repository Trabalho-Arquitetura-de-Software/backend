# ==========================================
# ENUMS
# ==========================================

enum UserRole {
    ADMIN
    PROFESSOR
    STUDENT
}

# ==========================================
# TYPES
# ==========================================

type UserDTO {
    id: ID
    name: String!
    email: String!
    password: String!
    role: UserRole!
}

type GroupDTO {
    id: ID
    name: String!
    availableForProjects: Boolean!
    coordinator: UserDTO!
    students: [UserDTO!]!
}

type AuthToken {
    token: String!
}

# ==========================================
# INPUTS
# ==========================================

input GroupInput {
    name: String!
    availableForProjects: Boolean!
    coordinatorId: ID!
    studentIds: [ID!]!
}

# ==========================================
# QUERIES
# ==========================================

type Query {
    findUserByEmail(email: String!): UserDTO!
    findUserByRole(role: UserRole!): [UserDTO!]!
    findUserById(id: ID!): UserDTO!
    findAllUsers: [UserDTO!]!

    findGroupById(id: ID!): GroupDTO
    findAllGroups: [GroupDTO!]!
}

# ==========================================
# MUTATIONS
# ==========================================

type Mutation {
    saveUser(
        name: String!
        email: String!
        password: String!
        role: UserRole!
    ): UserDTO!

    updateUser(
        id: ID!
        name: String
        email: String
        password: String
        role: UserRole
    ): UserDTO!

    deleteUser(id: ID!): UserDTO!

    saveGroup(input: GroupInput!): GroupDTO!

    updateGroup(
        id: ID!
        name: String
        availableForProjects: Boolean
        coordinatorId: ID
        studentIds: [ID!]
    ): GroupDTO!

    deleteGroup(id: ID!): GroupDTO!

    login(email: String!, password: String!): AuthToken!

    register(
        name: String!
        email: String!
        password: String!
        role: UserRole!
    ): UserDTO!
}
