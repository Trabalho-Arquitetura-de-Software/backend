scalar Date

# ==========================================
# ENUMS
# ==========================================

enum UserRole {
    ADMIN
    PROFESSOR
    STUDENT
}

enum ProjectStatus{
    PENDING_ANALYSIS
    UNDER_ANALYSIS
    REJECTED
    IN_PROGRESS
    FINISHED
}

# ==========================================
# TYPES
# ==========================================

type UserDTO {
    id: ID!
    name: String
    affiliatedSchool: String,
    email: String
    password: String
    role: UserRole
}

type GroupDTO {
    id: ID!
    name: String
    availableForProjects: Boolean
    coordinator: UserDTO
    students: [UserDTO!]
    projects: [ProjectDTO!]
}

type ProjectDTO {
    id: ID!
    name: String
    objective: String
    summaryScope: String
    targetAudience: String
    expectedStartDate: Date
    status: ProjectStatus
    requester: UserDTO
    group: GroupDTO
}

type LoginReturnDTO{
    user: UserDTO!
    token: String!
}

# ==========================================
# QUERIES
# ==========================================

type Query {
    findUserByEmail(email: String!): UserDTO!
    findUserByRole(role: UserRole!): [UserDTO!]!
    findUserById(id: ID!): UserDTO!
    findAllUsers: [UserDTO!]!

    findAllGroupsById(id: [ID!]!): [GroupDTO!]!
    findAllGroups: [GroupDTO!]!
    findAllGroupsByNameIn(names: [String!]!): [GroupDTO!]!
    findAllGroupByCoordinator(coordinator_id: ID!): [GroupDTO!]!
    findAllGroupsByStudentId(student_id: ID!): [GroupDTO!]

    findAllProjects: [ProjectDTO!]!
    findAllProjectsByRequester(requester_id: ID!): [ProjectDTO!]!
}

# ==========================================
# MUTATIONS
# ==========================================

type Mutation {
    saveUser(name: String!, affiliatedSchool: String!, email: String!, password: String!, role: UserRole!): UserDTO!
    updateUser(id: ID!, name: String, affiliatedSchool: String, email: String, password: String, role: UserRole): UserDTO!
    deleteUser(id: ID!): UserDTO!

    saveGroup(name: String!, coordinator: ID!, students: [ID!]!): GroupDTO!
    updateGroup(id: ID!, name: String, availableForProjects: Boolean, coordinator: ID, students: [ID!]): GroupDTO!
    groupAddStudent(groupId: ID!, studentEmail: String!): GroupDTO!
    groupRemoveStudent(groupId: ID!, studentId: ID!): GroupDTO!
    deleteGroup(id: ID!): GroupDTO!

    saveProject(name: String!, objective: String!, summaryScope: String!, targetAudience: String!, expectedStartDate: Date!, requester: ID!): ProjectDTO!
    updateProject(id: ID!, name: String, objective: String, summaryScope: String, targetAudience: String, expectedStartDate: Date, status: ProjectStatus, requester: ID, group: ID): ProjectDTO!

    login(email: String!, password: String!): LoginReturnDTO!
    changePassword(email: String!, password: String!, newPassword: String!): Boolean!

    populateTheDataBase: String!
}